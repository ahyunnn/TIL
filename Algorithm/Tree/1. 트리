## 1. 트리

1. **트리의 개념**
   
   - **비선형** 구조
     
     - 선형구조 & 비선형구조
       
       - 선형구조 : 자료를 구성하는 데이터를 순차적으로 나열시킨 형태 (1대1)
       
       - 비선형구조 : 하나이 자료 뒤(안)에 여러개의 자료가 존재할 수 있는 형태
   
   - 원소들 간에 **1:n 관계**를 가지는 구조 (1대 다)
   
   - 원소들 간에 계층관계를 가지는 **계층형** 자료구조
   
   - 상위 원소에서 하위 원소로 내려가면서 **확장되는 트리(나무)모양**의 구조
   
   - 한 개 이상의 노드(정점, vertex)로 이루어진 유한 집합이며 다음 조건을 만족한다.
     
     - 노드 중 **최상위 노드를 루트(root)**라 한다 ⇒ 뒤집어진 나무(뿌리가 위에)
     - 나머지 노드들은 n개의 분리 집합 T1, …TN으로 분리될 수 있다.
   
   - 이들 T1, …TN은 **각각 하나의 트리가 되며(재귀적 정의 : 잘라내도 트리의 모양) 루트의 부 트리(subtree)**라 한다.
   
   - 처음부터 대놓고 트리가 아니라, 상황을 정리했을 때 트리가 되어서 정리됨
     
     

2. **트리 용어정리**
   
   - **노드(node)** : 트리의 원소 / 각 점
     - 트리 T의 노드 - A, B, C, D, E, F, G, H, I, J, K
   - **간선(edge)** : 노드를 연결하는 선, 부모 노드와 자식 노드를 연결(계층적 관계, 상대적)
   - **루트 노드(root node)** : 트리의 시작 노드
   - **형제 노드** : 같은 부모 노드의 자식 노드
     - B, C, D는 형제노드
   - **조상 노드** : 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들
     - K의 조상노드 : F, B, A
   - **서브 트리** : 부모노드와 연결된 간선을 끊었을 때 생성되는 트리
     - 트리는 일부분을 잘라내도 트리의 모양을 유지
   - **자손 노드** : 서브트리에 있는 하위 레벨의 노드들
     - B의 자손 노드 : E, F, K
   - **차수(degree)**
     - 노드의 차수 : 노드에 연결된 자식 노드의 수
       - B의 차수 = 2, C의 차수 = 1
     - 트리의 차수 : 트리에 있는 노드의 차수 중에서 가장 큰 값
       - 트리 T의 차수 = 3 (D) **A의 차수는?**
     - 단말 노드(리프 노드) : 차수가 0인 노드, 자식 노드가 없는 노드
   - **높이 ⇒** 상대적
     - 노드의 높이 : 루트에서 노드에 이르는 간선의 수, 노드의 레벨 ⇒ 상대적인 표현
       - B의 높이 = 1, F의 높이 = 2
     - 트리의 높이 : 트리에 있는 노드의 높이 중에서 가장 큰 값, 최대 레벨
       - 트리 T의 높이 = 3

## 2. 이진트리 (1:2)

1. **이진트리**
   
   - 모든 노드들이 **2개의 서브트리를 갖는 특별한 형태의 트리**
   
   - 각 노드가 **자식 노드를 최대한 2개까지만 가질 수 있는 트리**
     
     - 왼쪽 자식 노드
     - 오른쪽 자식 노드
   
   - 이진 트리의 예
     
     - 자식이 없거나, 하나이거나, 2개이거나까지 ⇒ 최대 2개
   
   - 특성 ⇒ **그려보기**
     
     - 레벨 i에서의 노드의 최대 개수는 2^i개
       - 레벨 0에서의 노드의 최대 개수는 1개
       - 레벨 1에서의 노드의 최대 개수는 2개
     - 같은 레벨끼리는 연결되지 않음 (연결되는 건 그래프)
     - 높이가 h인 이진트리가 가질 수 있는 노드의 최소 개수는 `(h+1)`개가 되며, 최대 개수는 `(2^(h+1)-1)`개가 된다
   
   - 종류
     
     1. **포화 이진 트리(Full Binary Tree)**
        
        - 모든 레벨에 노드가 포화상태로 차 있는 이진 트리
        
        - 높이가 h일 때, **최대 노드 개수인 (2^(h+1)-1)의 노드를 가진 이진 트리**
        
        - **루트를 1번으로 하여 (2^(h+1)-1)까지 정해진 위치에 대한 노드 번호를 가짐**
     
     2. **완전 이진 트리(Complete Binary Tree)**
        
        - 높이가 h이고 노드 수가 n개일 때, 포화 이진트리의 노드 **번호 1번부터 n번까지 빈 자리가 없는 이진 트리**
     
     3. **편향 이진 트리(Skewed Binary Tree)**
        
        - 높이 h에 대한 최소 개수의 노드를 가지면서, 한쪽 방향의 자식 노드만을 가진 이진 트리
        - 왼쪽 편향 이진 트리
        - 오른쪽 편향 이진 트리
        - 트리는 효율성을 높이기 위함인데 편향은 별로 효율성이 좋지 않음 → 트리 중 최악의 시간 구조
   
   - **순회**
     
     - 순회(traversal)란 트리의 **각 노드를 중복되지 않게 전부 방문(visit)하는 것**을 말하는데 트리는 비선형적 구조이기 때문에 선형구조에서와 같이 선후 연결 관계를 알 수 없다
     
     - 트리의 노드들을 체계적으로 방문하는 것
       
       - **3가지의 기본적인 순회방법**
         
         1. **전위순회**
            
            1. VLR (루트 ⇒ 왼쪽 ⇒ 오른쪽)
            2. 부모노드 방문(처리) 후, 자식노드를 좌, 우 순서로 방문한다.
            
            ⇒ 만나자마자 방문처리하고 그 다음 단계로 넘어감
         
         2. **중위순회**
            
            1. LVR (왼쪽 ⇒ 루트 ⇒ 오른쪽)
            2. 왼쪽 자식노드, 부모노드, 오른쪽 자신노드 순으로 방문
            
            ⇒ 왼쪽을 가고, 되돌아왔을 때 방문처리
            
            ⇒ 전위 순회와의 차이는 방문처리가 먼저냐, 왼쪽 갔다와서 방문처리하느냐
         
         3. **후위순회**
            
            1. LRV (왼쪽 ⇒ 오른쪽 ⇒ 루트)
            2. 자식노드를 좌우 순서로 방문한 후, 부모노드로 방문
            
            ⇒ 왼쪽갔다가, 오른쪽갔다가 루트로 왔을 때 방문처리



## 3. 이진트리의 표현 (배열)

1. **배열을 이용한 이진 트리의 표현 (포화이진트리 / 완전이진트리)**
   
   1. 이진트리에 각 노드 번호를 다음과 같이 부여
   
   2. 루트의 번호를 1로 함
   
   3. 레벨 n에 있는 노드에 대하여 왼쪽부터 오른쪽으로 2^n부터 2^(n+1) -1까지 번호를 차례로 부여

2. **이진트리의 표현 - 배열 (포화 / 완전)**
   
   - 노드번호의 성질
     - 노드 번호가 I인 노드의 부모 노드 번호 : └i/2┘
     - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호 : 2 * i
     - 노드 번호가 i인 노드의 오른쪽 자식 노드 번호 : 2 * i + 1
     - 레벨 n의 노드 번호 시작 번호는 : 2^n
   - 노드 번호를 배열의 인덱스로 사용
   - 높이가 h인 이진 트리를 위한 배열의 크기는?
     - 레벨 i의 최대 노드 수는 : 2^i
     - ㅇㅇ

3. **배열을 이용한 이진 트리의 표현의 단점**
   
   - 편향 이진 트리의 경우에 사용하지 안흔 배열 원소에 대한 메모리 공간 낭비 발생
   - 트리의 중간에 새로운 노드를 삽입하거나 기존의 노드를 삭제할 경우 배열의 크기 변경이 어려워 비효율적



## 4. 이진트리의 표현 (연결리스트)

- 배열을 이용한 이진 트리의 표현의 단점을 보완하기 위해 연결리스트를 이용하여 트리를 표현할 수 있다.
- 연결 자료 구조를 이용한 이진트리의 표현
  - 이진 트리의 모든 노드는 최대 2개의 자식 노드를 가지므로 일정한 구조의 단순 연결 리스트 노드를 사용하여 구현

## 5. 수식트리

1. **수식트리**
   
   - 수식을 표현하는 이진 트리
   
   - 수식 이진 트리(Expression Binary Tree)라고 부르기도 함
   
   - 연산자는 루트노드이거나 가지 노드
   
   - 피연산자는 모두 잎 노드

2. **수식트리의 순회**
   
   1. 중위 순회 : `A / B * C * D + E`
   2. 후위 순회 : `A B / C * D * E +`
   3. 전위 순회 : `+ * * / A B C D E`

## 6. 이진 탐색 트리 (BST)

1. **이진 탐색 트리**
   
   - 탐색 작업을 효율적으로 하기 위한 자료구조
   - 모든 원소는 서로 다른 유일한 키를 갖는다.
   - key(왼쪽 서브트리) < key(루트 노드) < key(오른쪽 서브트리)
   - 왼쪽 서브트리와 오른쪽 서브트리도 이진 탐색 트리다.
   - 중위 순회하면 오름차순으로 정렬된 값을 얻을 수 있다.

2. **탐색연산**
   
   - 루트에서 시작한다.
   - 탐색할 키 값 x를 루트 노드의 키 값과 비교한다.
     - 루트 기준으로 큰값과 작은값 (작으면 왼쪽, 크면 오른쪽)
     - (키 값x = 루트노드의 키 값) : 원하는 원소를 찾았으므로 탐색연산 성공
     - (키 값x < 루트노드의 키 값) : 루트노드의 왼쪽 서브트리에 대해서 탐색연산 수행
     - (키 값x > 루트노드의 키 값) : 루트노드의 오른쪽 서브트리에 대해서 탐색연산 수행
     - 순환적으로 탐색

3. **삽입연산**
   
   1. 먼저 탐색 연산을 수행
      1. 삽입할 원소가 같은 원소가 트리에 있으면 삽입할 수 없으므로, **같은 원소가 트리에 있는지 탐색**하여 확인
      2. 탐색에서 **탐색 실패(해당 값이 없다)가 결정되는 위치가 삽입위치**
   2. 탐색 실패한 위치에 원소를 삽입

4. **삭제연산**

5. **성능**
   
   - 탐색, 삽입, 삭제 시간은 트리의 높이 만큼 시간이 걸린다.
     - O(h) : BST의 깊이(height)
   - 평균의 경우
     - O(log2n)
     - 루트 노드를 기준으로 왼쪽인지 오른쪽인지
     - 트리구조가 리스트보다 탐색에 있어서 조금 더 유리하다
   - 최악의 경우(편향트리 (리스트와 유사)
     - O(n) : 전체를 다 봄 그래서 n개만큼 전부 다 확인
     - 순차 탐색과 시간복잡도가 같다.
   - 검색 알고리즘의 비교
     - 배열에서의 순차 검색
     - 정렬된 배열에서의 순차 검색
     - 정렬된 배열에서의 이진 탐색
     - 이진 탐색트리에서의 평균 : O
     - 해쉬 검색 : O(1)
   - 상용에서 검색을 위해 어떤 알고리즘을 사용할까? 해쉬검색



## 7. 힙(heap) (자료구조)

- **완전 이진 트리(이진트리가 채워져있어야함)**에 있는 노드 중에서 키 값이 가장 큰 노드나 키 값이 가장 작은 노드를 찾기 위해서 만든 **“자료구조”**(저장하는 방법)
  - 힙은 이진탐색(BST)일 필요가 없음 ⇒ 아니더라도 부모노드와 자식노드 크기만 비교
- **힙**
  - 완전이진트리로 구현된 자료구조로서, 키값이 가장 큰 노드나 가장 작은 노드를 찾기에 유용한 자료구조
  - 아래의 예는 최소 힙(Min heap)으로서, 가장 작은 키값을 가진 노드가 항상 루트에 위치한다.
  - 힙의 키를 우선순위로 활용하여 우선순위 큐를 구현할 수 있다.
- **최대 힙(max heap) : 가장 큰값을 루트로 둘지**
  - 키 값이 가장 큰 노드를 찾기 위한 완전 이진 트리
  - 나누는 기준 : **(부모노드의 키값 > 자식노드의 키값)**
  - 루트 노드 : 키값이 가장 큰 노드
- **최소 힙(min heap) : 가장 작은 값을 루트로 둘지**
  - 키 값이 가장 작은 노드를 찾기 위한 완전 이진 트리
  - 나누는 기준 : **(부모노드의 키값 < 자식노드의 키값)**
  - 루트 노드 : 키값이 가장 작은 노드
- **힙의 조건**
  1. 완전이진트리
  2. 최대힙 혹은 최소힙이냐
